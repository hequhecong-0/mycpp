
// 第一题
 
#include <iostream>
#include <math.h> // 为了使用常数 π
using namespace std;
#define  M_PI 3.14159265358979323846		// 为防止编译器不支持math.h里定义好的π,再次定义宏
class Container // 抽象类 容器
{
protected:
    double radius;

public:
    Container()
    {
        // 构造函数
    }
    Container(double r)
    {
        // 构造函数
    }
    virtual double area() = 0;   // 求表面积
    virtual double volume() = 0; // 求体积
    virtual void print() = 0;    // 输出相关信息
};

class Cube : public Container // 正方体类
{
public:
    Cube(double r)
    {
        radius = r; // 构造函数
    }
    double area()
    {
        return (6 * (radius * radius));
    }
    double volume()
    {
        return (radius * radius * radius);
    }
    void print()
    {
        cout << "表面积为:" << area() << endl;
        cout << "体积为:" << volume() << endl;
    }
};
class Sphere : public Container // 球类
{
public:
    Sphere(double r)
    {
        radius = r; // 构造函数
    }
    double area()
    {
        return (4 * M_PI * (radius * radius));
    }
    double volume()
    {
        return (4 / 3 * M_PI * (radius * radius * radius));
    }
    void print()
    {
        cout << "表面积为:" << area() << endl;
        cout << "体积为:" << volume() << endl;
    }
};
class Cylinder : public Container // 圆柱体类
{
protected:
    double height;

public:
    Cylinder(double r, double h)
    {
        radius = r; // 构造函数定义半径和高
        height = h;
    }
    double area()
    {
        return ((2 * M_PI * radius * height) + 2 * M_PI * (radius * radius));
    }
    double volume()
    {
        return (M_PI * (radius * radius) * height);
    }
    void print()
    {
        cout << "表面积为:" << area() << endl;
        cout << "体积为:" << volume() << endl;
    }
};
int main()
{
    Container *p = NULL;			// 定义基类空指针
    Cube a(1);								// 分别指向基类的空间,调用子类的函数
    Sphere b(1);
    Cylinder c(1, 2);
    p = &a;
    cout << p->area() << endl;
    cout << p->volume() << endl;
    p->print();
    p = &b;
    cout << p->area() << endl;
    cout << p->volume() << endl;
    p->print();
    p = &c;
    cout << p->area() << endl;
    cout << p->volume() << endl;
    p->print();
    return 0;
}

// 第二题
#include <iostream>
using namespace std;
class Complex
{
private:
    double real; // 实部
    double imag; // 虚部
public:
    Complex()
    {
        real = 0;
        imag = 0;
    }
    Complex(double r, double i)
    {
        real = r;
        imag = i;
    }
    void print() // 输出函数
    {
        cout << real;
        if (imag != 0)
        {
            if (imag > 0)
                cout << " +";
            cout << imag << "i";
        }
        cout << endl;
    }
    Complex operator+(Complex &a) // 重载 "+"
    {
        Complex b;
        b.real = real + a.real;
        b.imag = imag + a.imag;
        return b;
    }
    Complex operator-(Complex &a) // 重载 "-"
    {
        Complex b;
        b.real = real - a.real;
        b.imag = imag - a.imag;
        return b;
    }
    Complex operator*(Complex &a) // 重载 "*"
    {
        Complex b;
        b.real = (real * a.real) - (imag * a.imag);
        b.imag = (real * a.imag) + (imag * a.real);
        return b;
    }
    Complex operator/(Complex &a) // 重载 "/"
    {
        Complex b;
        double t = 1 / (a.real * a.real + a.imag * a.imag);
        b.real = t * (real * a.real) + (imag * a.imag);
        b.imag = t * (imag * a.real) - (real * a.imag);
        return b;
    }
    Complex operator++() // 重载 左"++"
    {
        ++real;
        ++imag;
        return *this;
    }
    Complex operator++(int) // 重载 右"++"
    {
        Complex b;
        b.real = real++;
        b.imag = imag++;
        return b;
    }
    ~Complex()
    {
    }
};

int main()
{
    Complex c1(2.3, 4), c2(3.6, 2);
    Complex c3, c4, c5, c6;
    c3 = c1 + c2;
    c4 = c1 - c2;
    c5 = c1 * c2;
    c6 = c1 / c2;
    cout << "c1= ";
    c1.print();
    cout << "c2= ";
    c2.print();
    cout << "c1+c2= ";
    c3.print();
    cout << "c1-c2= ";
    c4.print();
    cout << "c1*c2= ";
    c5.print();
    cout << "c1/c2=";
    c6.print();
    cout << "++c1为: ";
    c3 = ++c1;
    c3.print();
    cout << "c4=c2++为: ";
    c4 = c2++;
    c4.print();
    cout << "c2变为: ";
    c2.print();
    return 0;
}

